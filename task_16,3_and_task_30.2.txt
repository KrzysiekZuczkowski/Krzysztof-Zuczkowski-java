CREATE TABLE ISSUESLISTS
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50)
);

CREATE TABLE ISSUES
(
    ID SERIAL PRIMARY KEY,
    ISSUESLISTS_ID BIGINT UNSIGNED NOT NULL,
    SUMMARY ENUM('done', 'in progress', 'to do') NOT NULL,
    DESCRIPTION VARCHAR(1024),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (ISSUESLISTS_ID) REFERENCES ISSUESLISTS (ID),
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS (ID)
);

INSERT INTO ISSUESLISTS(NAME)
VALUES ('To Do');

INSERT INTO ISSUESLISTS(NAME)
VALUES ('In progress');

INSERT INTO ISSUESLISTS(NAME)
VALUES ('Done');

COMMIT;

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'done', 'something to do 1', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'to do', 'something to do 2', 1);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'in progress', 'something to do 3', 2);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'done', 'something to do 4', 5);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'to do', 'something to do 5', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'done', 'something in progress 1', 1);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'to do', 'something in progress 2', 1);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'in progress', 'something in progress 3', 5);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'done', 'something in progress 4', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'in progress', 'something in progress 5', 2);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'to do', 'something done 1', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'to do', 'something done 2', 5);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'done', 'something done 3', 3);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'done', 'something done 4', 2);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'in progress', 'something done 5', 1);

COMMIT;

#1. Listę zadań z tabeli ISSUESS z dołączonymi do nich nazwami
# list zadań z tabeli ISSUESLISTS

  SELECT I.DESCRIPTION , I.SUMMARY AS IsExeCuted, I2.NAME
  FROM ISSUES I
  JOIN ISSUESLISTS I2 ON I.ISSUESLISTS_ID = I2.ID;


#2. Listę zadań z tabeli ISSUESS z przypisanymi do nich użytkownikami z tabeli USERS

  SELECT I.DESCRIPTION , I.SUMMARY AS IsExeCuted, U.FIRSTNAME, U.LASTNAME
  FROM ISSUES I
  JOIN USERS U ON I.USER_ID_ASSIGNEDTO = U.ID;


#3. Imiona i nazwiska użytkowników posiadających zadania, wraz
# z informacją o ilości zadań, które są do nich przypisane

  SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS TASK_NUMBER
  FROM ISSUES I
  JOIN USERS U ON I.USER_ID_ASSIGNEDTO = U.ID
  GROUP BY I.USER_ID_ASSIGNEDTO;

--------------------------------------------------------------------------------------------------
# Zadanie 30.2 Oznaczamy bestsellery

ALTER TABLE BOOKS ADD BESTSELLER BOOLEAN DEFAULT FALSE;

DROP PROCEDURE IF EXISTS UpdateBestsellers;

DELIMITER $$

CREATE PROCEDURE UpdateBestsellers()
BEGIN
    DECLARE BOOKS_RENTED_PER_MONTH, BOOK, MONTH INT;
    DECLARE BEST BOOLEAN;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_BOOKS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
    DECLARE ALL_MONTH CURSOR FOR SELECT DISTINCT MONTH(RENT_DATE) FROM RENTS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_BOOKS;
    FETCH ALL_BOOKS INTO BOOK;
    WHILE (FINISHED = 0) DO
        OPEN ALL_MONTH;
        FETCH ALL_MONTH INTO MONTH;
        WHILE (FINISHED = 0) DO
            SELECT COUNT(*) FROM RENTS
            WHERE BOOK_ID = BOOK AND MONTH(RENT_DATE) = MONTH
            INTO BOOKS_RENTED_PER_MONTH;

            SELECT BESTSELLER FROM BOOKS
            WHERE BOOK_ID = BOOK
            INTO BEST;

            IF (BOOKS_RENTED_PER_MONTH > 2 AND NOT BEST) THEN
                UPDATE BOOKS SET BESTSELLER = TRUE
                WHERE BOOK_ID = BOOK;
                COMMIT;
            END IF;
            FETCH ALL_MONTH INTO MONTH;
        END WHILE;
        CLOSE ALL_MONTH;
        SET FINISHED = 0;
        FETCH ALL_BOOKS INTO BOOK;
        END WHILE;

    CLOSE ALL_BOOKS;
END $$

DELIMITER ;

CALL UpdateBestsellers();
