CREATE TABLE ISSUESLISTS
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50)
);

CREATE TABLE ISSUES
(
    ID SERIAL PRIMARY KEY,
    ISSUESLISTS_ID BIGINT UNSIGNED NOT NULL,
    SUMMARY ENUM('done', 'in progress', 'to do') NOT NULL,
    DESCRIPTION VARCHAR(1024),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (ISSUESLISTS_ID) REFERENCES ISSUESLISTS (ID),
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS (ID)
);

INSERT INTO ISSUESLISTS(NAME)
VALUES ('To Do');

INSERT INTO ISSUESLISTS(NAME)
VALUES ('In progress');

INSERT INTO ISSUESLISTS(NAME)
VALUES ('Done');

COMMIT;

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'done', 'something to do 1', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'to do', 'something to do 2', 1);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'in progress', 'something to do 3', 2);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'done', 'something to do 4', 5);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'to do', 'something to do 5', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'done', 'something in progress 1', 1);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'to do', 'something in progress 2', 1);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'in progress', 'something in progress 3', 5);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'done', 'something in progress 4', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'in progress', 'something in progress 5', 2);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'to do', 'something done 1', 4);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'to do', 'something done 2', 5);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'done', 'something done 3', 3);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'done', 'something done 4', 2);

INSERT INTO ISSUES(ISSUESLISTS_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'in progress', 'something done 5', 1);

COMMIT;

#1. Listę zadań z tabeli ISSUESS z dołączonymi do nich nazwami
# list zadań z tabeli ISSUESLISTS

  SELECT I.DESCRIPTION , I.SUMMARY AS IsExeCuted, I2.NAME
  FROM ISSUES I
  JOIN ISSUESLISTS I2 ON I.ISSUESLISTS_ID = I2.ID;


#2. Listę zadań z tabeli ISSUESS z przypisanymi do nich użytkownikami z tabeli USERS

  SELECT I.DESCRIPTION , I.SUMMARY AS IsExeCuted, U.FIRSTNAME, U.LASTNAME
  FROM ISSUES I
  JOIN USERS U ON I.USER_ID_ASSIGNEDTO = U.ID;


#3. Imiona i nazwiska użytkowników posiadających zadania, wraz
# z informacją o ilości zadań, które są do nich przypisane

  SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS TASK_NUMBER
  FROM ISSUES I
  JOIN USERS U ON I.USER_ID_ASSIGNEDTO = U.ID
  GROUP BY I.USER_ID_ASSIGNEDTO;

--------------------------------------------------------------------------------------------------
# Zadanie 30.2 Oznaczamy bestsellery

ALTER TABLE BOOKS ADD BESTSELLER BOOLEAN DEFAULT FALSE;

DROP PROCEDURE IF EXISTS UpdateBestsellers;

DELIMITER $$

CREATE PROCEDURE UpdateBestsellers()
BEGIN
    DECLARE BOOKS_RENTED_PER_MONTH, BOOK, MONTH INT;
    DECLARE BEST BOOLEAN;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_BOOKS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
    DECLARE ALL_MONTH CURSOR FOR SELECT DISTINCT MONTH(RENT_DATE) FROM RENTS;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
    OPEN ALL_BOOKS;
    FETCH ALL_BOOKS INTO BOOK;
    WHILE (FINISHED = 0) DO
        OPEN ALL_MONTH;
        FETCH ALL_MONTH INTO MONTH;
        WHILE (FINISHED = 0) DO
            SELECT COUNT(*) FROM RENTS
            WHERE BOOK_ID = BOOK AND MONTH(RENT_DATE) = MONTH
            INTO BOOKS_RENTED_PER_MONTH;

            SELECT BESTSELLER FROM BOOKS
            WHERE BOOK_ID = BOOK
            INTO BEST;

            IF (BOOKS_RENTED_PER_MONTH > 2 AND NOT BEST) THEN
                UPDATE BOOKS SET BESTSELLER = TRUE
                WHERE BOOK_ID = BOOK;
                COMMIT;
            END IF;
            FETCH ALL_MONTH INTO MONTH;
        END WHILE;
        CLOSE ALL_MONTH;
        SET FINISHED = 0;
        FETCH ALL_BOOKS INTO BOOK;
        END WHILE;

    CLOSE ALL_BOOKS;
END $$

DELIMITER ;

CALL UpdateBestsellers();

--------------------------------------------------------------------------------------------------
# Zadanie 30.4 Audytujemy książki oraz czytelników

CREATE TABLE BOOKS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           BOOK_ID INT(11) NOT NULL,
                           OLD_TITLE VARCHAR(255),
                           NEW_TITLE VARCHAR(255),
                           OLD_PUBYEAR INT(4),
                           NEW_PUBYEAR INT(4),
                           OLD_BESTSELLER BOOLEAN,
                           NEW_BESTSELLER BOOLEAN,
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER BOOKS_INSERT AFTER INSERT ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR,
                           NEW_BESTSELLER)
        VALUE(CURTIME(), 'INSERT', NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR, NEW.BESTSELLER);
END $$

DELIMITER ;

INSERT INTO BOOKS (TITLE, PUBYEAR, BESTSELLER)
    VALUES ('TEST', 2000, TRUE);

COMMIT;

DELIMITER $$

CREATE TRIGGER BOOKS_DELETE AFTER DELETE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID)
        VALUE(CURTIME(), 'DELETE', OLD.BOOK_ID);
END $$

DELIMITER ;

DELETE FROM BOOKS WHERE BOOK_ID = 7;

COMMIT;

DELIMITER $$

CREATE TRIGGER BOOKS_UPDATE AFTER UPDATE ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR,
                           NEW_BESTSELLER, OLD_TITLE, OLD_PUBYEAR, OLD_BESTSELLER)
        VALUE(CURTIME(), 'UPDATE', OLD.BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
              NEW.BESTSELLER, OLD.TITLE, OLD.PUBYEAR, OLD.BESTSELLER);
END $$

DELIMITER ;

UPDATE BOOKS SET BESTSELLER = FALSE
WHERE BOOK_ID = 6;

COMMIT;

CREATE TABLE READERS_AUD (
                           EVENT_ID INT(11) NOT NULL AUTO_INCREMENT,
                           EVENT_DATE DATETIME NOT NULL,
                           EVENT_TYPE VARCHAR(10) DEFAULT NULL,
                           READER_ID INT(11) NOT NULL,
                           OLD_FIRSTNAME VARCHAR(255),
                           NEW_FIRSTNAME VARCHAR(255),
                           OLD_LASTNAME VARCHAR(255),
                           NEW_LASTNAME VARCHAR(255),
                           OLD_PESELID VARCHAR(11),
                           NEW_PESELID VARCHAR(11),
                           OLD_VIP_LEVEL VARCHAR(20),
                           NEW_VIP_LEVEL VARCHAR(20),
                           PRIMARY KEY (EVENT_ID)
);

DELIMITER $$

CREATE TRIGGER READERS_INSERT AFTER INSERT ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME,
                           NEW_PESELID, NEW_VIP_LEVEL)
        VALUE(CURTIME(), 'INSERT', NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL);
END $$

DELIMITER ;

INSERT INTO READERS (FIRSTNAME, LASTNAME, PESELID, VIP_LEVEL)
    VALUES ('TEST FIRST', 'TEST LAST', 'TEST PESEL', 'TEST VIP');

COMMIT;

DELIMITER $$

CREATE TRIGGER READERS_DELETE AFTER DELETE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID)
        VALUE(CURTIME(), 'DELETE', OLD.READER_ID);
END $$

DELIMITER ;

DELETE FROM READERS WHERE READER_ID = 7;

COMMIT;

DELIMITER $$

CREATE TRIGGER READERS_UPDATE AFTER UPDATE ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESELID,
                             NEW_VIP_LEVEL, OLD_FIRSTNAME, OLD_LASTNAME, OLD_PESELID, OLD_VIP_LEVEL)
        VALUE(CURTIME(), 'UPDATE', OLD.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL,
              OLD.FIRSTNAME, OLD.LASTNAME, OLD.PESELID, OLD.VIP_LEVEL);
END $$

DELIMITER ;

UPDATE READERS SET VIP_LEVEL = 'Standard customer'
WHERE READER_ID = 5;

COMMIT;

--------------------------------------------------------------------------------------------------
# Zadanie 30.5 tworzenie zdarzenia korzystającego z widoku

CREATE TABLE STATS (
        STAT_ID INT(11) NOT NULL AUTO_INCREMENT,
        STAT_DATE DATETIME NOT NULL,
        STAT VARCHAR(20) NOT NULL,
        VALUE INT(11) NOT NULL,
        PRIMARY KEY (STAT_ID)
);

CREATE VIEW BESTSELLERS_COUNT AS
    SELECT COUNT(*) AS BESTSELLERS_QTY FROM BOOKS
        WHERE BESTSELLER = TRUE;

USE KODILLA_COURSE;

DELIMITER $$

CREATE EVENT UPDATE_STATS
    ON SCHEDULE EVERY 1 MINUTE
    DO
    BEGIN
        DECLARE BEST_COUNT INT;
        CALL UpdateBestsellers();
        SELECT * FROM BESTSELLERS_COUNT
        INTO BEST_COUNT;
        INSERT INTO STATS (STAT_DATE, STAT, VALUE)
        VALUES(CURTIME(), 'BESTSELLERS', BEST_COUNT);
        COMMIT;
    END $$

DELIMITER ;

--------------------------------------------------------------------------------------------------
# Zadanie 30.6 indeksy dla biblioteki

EXPLAIN SELECT *
    FROM READERS
WHERE FIRSTNAME LIKE 'John';

CREATE INDEX NAME ON READERS (FIRSTNAME, LASTNAME);

EXPLAIN SELECT *
    FROM READERS
WHERE FIRSTNAME LIKE 'John';

CREATE INDEX TITLE ON BOOKS (TITLE);
